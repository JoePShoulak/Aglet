IDENTIFIER: [a-zA-Z_]\w*
INTEGER: [0-9]+

PLUS: "+"
MINUS: "-"
MULT: "*"
DIV: "/"
MOD: "%"

LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
COMMA: ","
COLON: ":"
ARROW: "->"

FUNC: "funk"
SET: "set"
LET: "let"
IF: "if"
ELSE: "else"
RETURN: "return"

#Syntax-wise, a valid program will consist of any list of statements
all: statement*

statement   : expression
            | function-decl

expression: add-expr

add-expr    : multiply-expr PLUS multiply-expr
            | multiply-expr MINUS multiply-expr
            | multiply-expr

multiply-expr   : value MULT value
                | value DIV value
                | value MOD value
                | value

paren-expr : LPAREN expression RPAREN

value   : IDENTIFIER
        | INTEGER
        | paren-expr
        | function-call

#Function calls
function-call   : IDENTIFIER LPAREN parameter-list RPAREN
parameter-list  : (value (COMMA value)*)?

#Function declarations
function-decl: FUNC IDENTIFIER LPAREN parameter-decl-list RPAREN ARROW type-decl LBRACE statement* RBRACE
parameter-decl-list: (parameter-decl (COMMA parameter-decl)*)?
parameter-decl: IDENTIFIER COLON type-decl
type-decl: IDENTIFIER #Technically can be ANY word, but at semantic stage, will be limited to valid types: "char", "int", "void"
